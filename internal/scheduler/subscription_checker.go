package scheduler

import (
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/ilokitv/botVPN/internal/database"
	"github.com/ilokitv/botVPN/internal/models"
	"github.com/ilokitv/botVPN/internal/vpn"
)

// SubscriptionChecker - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
type SubscriptionChecker struct {
	db         *database.DB
	vpnManager *vpn.WireguardManager
	bot        *tgbotapi.BotAPI
	interval   time.Duration // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
	stop       chan struct{} // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
}

// NewSubscriptionChecker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
func NewSubscriptionChecker(db *database.DB, vpnManager *vpn.WireguardManager, bot *tgbotapi.BotAPI, interval time.Duration) *SubscriptionChecker {
	return &SubscriptionChecker{
		db:         db,
		vpnManager: vpnManager,
		bot:        bot,
		interval:   interval,
		stop:       make(chan struct{}),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
func (sc *SubscriptionChecker) Start() {
	log.Println("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")

	// –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
	go sc.checkExpiredSubscriptions()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
	ticker := time.NewTicker(sc.interval)
	go func() {
		for {
			select {
			case <-ticker.C:
				go sc.checkExpiredSubscriptions()
			case <-sc.stop:
				ticker.Stop()
				return
			}
		}
	}()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
func (sc *SubscriptionChecker) Stop() {
	log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
	close(sc.stop)
}

// checkExpiredSubscriptions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ
func (sc *SubscriptionChecker) checkExpiredSubscriptions() {
	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	subscriptions, err := sc.getActiveSubscriptions()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
		return
	}

	log.Printf("–ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", len(subscriptions))

	now := time.Now()
	expiredCount := 0
	var expiredSubscriptions []models.Subscription

	for _, subscription := range subscriptions {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
		if now.After(subscription.EndDate) {
			log.Printf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ #%d, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #%d, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s",
				subscription.ID, subscription.UserID, subscription.EndDate.Format("02.01.2006"))

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ "expired"
			err = sc.expireSubscription(&subscription)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ #%d: %v", subscription.ID, err)
				continue
			}

			// –û—Ç–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
			err = sc.revokeVPNConfig(&subscription)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ #%d: %v", subscription.ID, err)
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			err = sc.notifyUser(&subscription)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #%d: %v", subscription.UserID, err)
			}

			log.Printf("–ü–æ–¥–ø–∏—Å–∫–∞ #%d —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∞—è –∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞", subscription.ID)

			expiredCount++
			expiredSubscriptions = append(expiredSubscriptions, subscription)
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ—Ä–æ –ª–∏ –∏—Å—Ç–µ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π)
			daysLeft := int(subscription.EndDate.Sub(now).Hours() / 24)
			if daysLeft <= 3 && daysLeft >= 0 {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
				err = sc.notifyUserAboutExpiration(&subscription, daysLeft)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #%d: %v", subscription.UserID, err)
				}
			}
		}
	}

	// –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
	if expiredCount > 0 {
		err = sc.notifyAdmins(expiredSubscriptions)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: %v", err)
		}
	}

	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// getActiveSubscriptions –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (sc *SubscriptionChecker) getActiveSubscriptions() ([]models.Subscription, error) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "active"
	query := "SELECT * FROM subscriptions WHERE status = 'active'"
	var subscriptions []models.Subscription
	err := sc.db.Select(&subscriptions, query)
	if err != nil {
		return nil, err
	}
	return subscriptions, nil
}

// expireSubscription —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ "expired"
func (sc *SubscriptionChecker) expireSubscription(subscription *models.Subscription) error {
	subscription.Status = "expired"
	return sc.db.UpdateSubscription(subscription)
}

// revokeVPNConfig –æ—Ç–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN —Å —Å–µ—Ä–≤–µ—Ä–∞
func (sc *SubscriptionChecker) revokeVPNConfig(subscription *models.Subscription) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
	server, err := sc.db.GetServerByID(subscription.ServerID)
	if err != nil {
		return err
	}

	// –û—Ç–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
	return sc.vpnManager.RevokeClientConfig(server, subscription.ConfigFilePath)
}

// notifyUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (sc *SubscriptionChecker) notifyUser(subscription *models.Subscription) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user, err := sc.db.GetUserByID(subscription.UserID)
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
	plan, err := sc.db.GetSubscriptionPlanByID(subscription.PlanID)
	if err != nil {
		return err
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	message := fmt.Sprintf(
		"‚ùóÔ∏è *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫* ‚ùóÔ∏è\n\n"+
			"–ü–æ–¥–ø–∏—Å–∫–∞: #%d\n"+
			"–ü–ª–∞–Ω: %s\n"+
			"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: %s\n"+
			"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n\n"+
			"–í–∞—à–µ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n"+
			"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /buy.",
		subscription.ID,
		plan.Name,
		subscription.StartDate.Format("02.01.2006"),
		subscription.EndDate.Format("02.01.2006"),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(user.TelegramID, message)
	msg.ParseMode = "Markdown"

	_, err = sc.bot.Send(msg)
	return err
}

// notifyUserAboutExpiration –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (sc *SubscriptionChecker) notifyUserAboutExpiration(subscription *models.Subscription, daysLeft int) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user, err := sc.db.GetUserByID(subscription.UserID)
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
	plan, err := sc.db.GetSubscriptionPlanByID(subscription.PlanID)
	if err != nil {
		return err
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	message := fmt.Sprintf(
		"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç* ‚ö†Ô∏è\n\n"+
			"–ü–æ–¥–ø–∏—Å–∫–∞: #%d\n"+
			"–ü–ª–∞–Ω: %s\n"+
			"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n\n"+
			"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: *%d*\n\n"+
			"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy.\n"+
			"–ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤–∞—à–µ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.",
		subscription.ID,
		plan.Name,
		subscription.EndDate.Format("02.01.2006"),
		daysLeft,
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(user.TelegramID, message)
	msg.ParseMode = "Markdown"

	_, err = sc.bot.Send(msg)
	return err
}

// notifyAdmins –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
func (sc *SubscriptionChecker) notifyAdmins(expiredSubscriptions []models.Subscription) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	admins, err := sc.db.GetAllAdmins()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %w", err)
	}

	if len(admins) == 0 {
		log.Println("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
		return nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º
	message := fmt.Sprintf(
		"üìä *–û—Ç—á–µ—Ç –æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö*\n\n"+
			"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: %d\n\n"+
			"*–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:*\n",
		len(expiredSubscriptions),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
	for i, subscription := range expiredSubscriptions {
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		user, err := sc.db.GetUserByID(subscription.UserID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ #%d: %v", subscription.UserID, err)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
		plan, err := sc.db.GetSubscriptionPlanByID(subscription.PlanID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ #%d: %v", subscription.PlanID, err)
			continue
		}

		userInfo := fmt.Sprintf("%s", user.Username)
		if userInfo == "" {
			userInfo = fmt.Sprintf("ID: %d", user.TelegramID)
		}

		message += fmt.Sprintf(
			"%d. –ü–æ–¥–ø–∏—Å–∫–∞ #%d - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s - –ü–ª–∞–Ω: %s - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n",
			i+1,
			subscription.ID,
			userInfo,
			plan.Name,
			subscription.EndDate.Format("02.01.2006"),
		)
	}

	message += "\n–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	for _, admin := range admins {
		msg := tgbotapi.NewMessage(admin.TelegramID, message)
		msg.ParseMode = "Markdown"

		_, err := sc.bot.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É #%d: %v", admin.TelegramID, err)
		}
	}

	return nil
}
